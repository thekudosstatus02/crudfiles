// Online C++ compiler to run C++ program online
#include <iostream>
#include <queue>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int d){
            this->data = d;
            this->left = NULL;
            this->right = NULL;
        }
};

Node* buildTree(){
    cout<<"enter the data : "<<endl;
    int n;
    cin>>n;
    if(n == -1){
        return NULL;
    }
    else{
        Node* node = new Node(n);
        node->left = buildTree();
        node->right = buildTree();
        return node;
    }
}

void traverseInOrder(Node* root){
    if(root == NULL) return;
    traverseInOrder(root->left);
    cout<<root->data<<" ";
    traverseInOrder(root->right);
}

void traversePostOrder(Node* root){
    if(root == NULL) return;
    traversePostOrder(root->left);
    traversePostOrder(root->right);
    cout<<root->data<<" ";
}

void traversePreOrder(Node* root){
    if(root == NULL) return;
    cout<<root->data<<" ";
    traversePreOrder(root->left);
    traversePreOrder(root->right);
}

void traverseLevelOrder(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        Node* node = q.front();
        q.pop();
        if(node == NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<node->data<<" ";
            if(node->left != NULL){
                q.push(node->left);
            }
            if(node->right != NULL){
                q.push(node->right);
            }
        }
    }
    
}


int treeHeight(Node* root){
    if(root == NULL || (root->left == NULL && root ->right == NULL)) return 0;
    
    int lh = treeHeight(root->left) + 1;
    int rh = treeHeight(root->right) + 1;
    return max(lh, rh);
}


int main() {
    // Write C++ code here
    cout<<"Build Tree : "<<endl;
    Node* root = buildTree();
    traversePreOrder(root); // NLR 1 2 3
    cout<<endl;
    traverseInOrder(root);  // LNR 2 1 3
    cout<<endl;
    traversePostOrder(root);// LRN 2 3 1
    cout<<endl;
    traverseLevelOrder(root); // 1 2 3
    cout<<endl;
    cout<<"height : "<<treeHeight(root);
    return 0;
}